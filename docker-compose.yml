version: '3.4'

networks:
  dev:
    driver: bridge

services:
  eventingwebsite:
    container_name: eventing-website
    #image: foxmindedcontainers.azurecr.io/eventingwebsite
    image: mxsandmann/eventingwebsite
    build:
      context: .
      dockerfile: WebUI/WebUI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Honeycomb__ApiKey=${HONEYCOMB_APIKEY}
      - Authentication__SecretKey=${AUTH_KEY}
      - Authentication__KeyId=${AUTH_KEYID}
      - Authentication__Audience=${AUTH_AUDIENCE_WEBAPP}
      - Authentication__Issuer=${AUTH_ISSUER}
    ports:
      - 5000:5000      
    depends_on:
      - postgresql
    networks:
      - dev    
    volumes:      
      - ${APPDATA}/ASP.NET/Https:/home/appuser/.aspnet/https:ro

  apigetaway:    
    container_name: api-getaway
    #image: foxmindedcontainers.azurecr.io/ocelotgateway
    image: mxsandmann/ocelotgateway
    build:
      context: .
      dockerfile: ApiGateway/OcelotGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Honeycomb__ApiKey=${HONEYCOMB_APIKEY}  
    ports:
      - 5010:5010
    depends_on:
      - postgresql
    networks:
      - dev
    volumes:      
      - ${APPDATA}/ASP.NET/Https:/home/appuser/.aspnet/https:ro

  events:    
    container_name: events-service
    #image: foxmindedcontainers.azurecr.io/eventsservice
    image: mxsandmann/eventsservice
    build:
      context: .
      dockerfile: Services/Events/WebAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - MongoDB__ConnectionString=${CONNECTION_STRING_MONGODB}
      - ConnectionStrings__Postgresql=${CONNECTION_STRING_EVENTS}
      - Kestrel__Certificates__Development__Password=${KESTREL_CERT_DEVELOPMENT_PASSWORD}
      - Honeycomb__ApiKey=${HONEYCOMB_APIKEY}
      - Authentication__SecretKey=${AUTH_KEY}
      - Authentication__KeyId=${AUTH_KEYID}
      - Authentication__Audience=${AUTH_AUDIENCE_EVENTS}
      - Authentication__Issuer=${AUTH_ISSUER}
      - MessageBus__Host=rabbitmq
      - MessageBus__User=${RABBITMQ_DEFAULT_USER}
      - MessageBus__Password=${RABBITMQ_DEFAULT_PASS}
      - MessageBus__Port=5672
    ports:
      - 5020:5020
    depends_on:
      - postgresql
      - rabbitmq
    networks:
      - dev
    volumes:      
      - ${APPDATA}/ASP.NET/Https:/home/appuser/.aspnet/https:ro
  
  subscriptions:    
    container_name: subscriptions-service
    #image: foxmindedcontainers.azurecr.io/subscriptionsservice
    image: mxsandmann/subscriptionsservice
    build:
      context: .
      dockerfile: Services/Subscriptions/WebAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - MongoDB__ConnectionString=${CONNECTION_STRING_MONGODB}
      - ConnectionStrings__Postgresql=${CONNECTION_STRING_SUBSCRIPTIONS}
      - Email__Password=${EMAIL_PASSWORD}
      - Honeycomb__ApiKey=${HONEYCOMB_APIKEY}
      - Authentication__SecretKey=${AUTH_KEY}
      - Authentication__KeyId=${AUTH_KEYID}
      - Authentication__Audience=${AUTH_AUDIENCE_SUBSCRIPTIONS}
      - Authentication__Issuer=${AUTH_ISSUER}
    ports:
      - 5030:5030
    depends_on:
      - postgresql
    networks:
      - dev
    volumes:      
      - ${APPDATA}/ASP.NET/Https:/home/appuser/.aspnet/https:ro
  
  invitations:    
    container_name: invitations-service
    #image: foxmindedcontainers.azurecr.io/invitationsservice
    image: mxsandmann/invitationsservice
    build:
      context: .
      dockerfile: Services/Invitations/WebAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__Postgresql=${CONNECTION_STRING_INVITATIONS}
      - Honeycomb__ApiKey=${HONEYCOMB_APIKEY}
      - Authentication__SecretKey=${AUTH_KEY}
      - Authentication__KeyId=${AUTH_KEYID}
      - Authentication__Audience=${AUTH_AUDIENCE_INVITATIONS}
      - Authentication__Issuer=${AUTH_ISSUER}
      - MessageBus__Host=rabbitmq
      - MessageBus__User=${RABBITMQ_DEFAULT_USER}
      - MessageBus__Password=${RABBITMQ_DEFAULT_PASS}
      - MessageBus__Port=5672
      - Email__Password=${EMAIL_PASSWORD}
    ports:
      - 5040:5040
    depends_on:
      - postgresql
      - rabbitmq
    networks:
      - dev
    volumes:      
      - ${APPDATA}/ASP.NET/Https:/home/appuser/.aspnet/https:ro

  authentication:    
    container_name: authentication-service
    #image: foxmindedcontainers.azurecr.io/authenticationservice:latest
    image: mxsandmann/authenticationservice:latest
    build:
      context: .
      dockerfile: Services/Authentication/WebAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Authentication__SecretKey=${AUTH_KEY}
      - Authentication__KeyId=${AUTH_KEYID}
      - Authentication__Audience=${AUTH_AUDIENCE_SET}
      - Authentication__Issuer=${AUTH_ISSUER}
      - ConnectionStrings__Postgresql=${CONNECTION_STRING_AUTHENTICATION}
      - Users__Admin__Password=${ADMIN_PASSWORD}
      - Honeycomb__ApiKey=${HONEYCOMB_APIKEY}
    ports:
      - 5050:5050
    depends_on:
      - postgresql
    networks:
      - dev
    volumes:      
      - ${APPDATA}/ASP.NET/Https:/home/appuser/.aspnet/https:ro

  postgresql:
    container_name: postgresql
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - dev

  mongodb:
    container_name: mongodb
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - mongodb-data:/data/db
    networks:
      - dev

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672 # For AMQP protocol
      - 15672:15672 # For management UI
    networks:
      - dev
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

volumes:
  db-data:
  mongodb-data:
  rabbitmq-data: